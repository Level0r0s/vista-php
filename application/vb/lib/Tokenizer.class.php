<?php

// Generated by Haxe 3.4.2
class Tokenizer extends util_ReadStream {
	public function __construct($src = null) {
		if(!php_Boot::$skip_constructor) {
		if($src === null) {
			$src = "";
		}
		parent::__construct($src);
		$this->reset();
		$this->advance();
	}}
	public $buf;
	public function atEnd() {
		$this->skipWhitespace();
		return $this->atEof();
	}
	public function nextToken() {
		$this->reset();
		$this->skipWhitespace();
		if($this->isLetter(null)) {
			return $this->readId();
		} else {
			return $this->nextCh();
		}
	}
	public function readId() {
		$this->buf->add($this->ch);
		while($this->isIdCh(null)) {
			$tmp = $this->buf;
			$tmp->add($this->nextCh());
			unset($tmp);
		}
		return $this->buf->b;
	}
	public function reset() {
		$this->buf = new StringBuf();
	}
	public function skipWhitespace() {
		if(!$this->isWhitespace(null)) {
			return;
		}
		while($this->isWhitespace(null)) {
			$this->advance();
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'Tokenizer'; }
}
