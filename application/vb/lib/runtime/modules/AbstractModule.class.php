<?php

// Generated by Haxe 3.4.2
class runtime_modules_AbstractModule {
	public function __construct($name, $propertyNames = null) {
		if(!php_Boot::$skip_constructor) {
		$this->name = $name;
		$tmp = null;
		if($propertyNames !== null) {
			$tmp = $propertyNames;
		} else {
			$tmp = (new _hx_array(array()));
		}
		$this->propertyNames = $tmp;
		$this->methodCache = new haxe_ds_StringMap();
		$this->methodDict = new haxe_ds_StringMap();
	}}
	public $methodCache;
	public $methodDict;
	public $name;
	public $propertyNames;
	public function addMethod($name, $method) {
		$this->methodDict->set($name, $method);
	}
	public function getMethod($name) {
		return $this->methodDict->get($name);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'runtime.modules.AbstractModule'; }
}
