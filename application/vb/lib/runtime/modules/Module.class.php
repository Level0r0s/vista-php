<?php

// Generated by Haxe 3.4.2
class runtime_modules_Module {
	public function __construct($name, $propertyNames = null) {
		if(!php_Boot::$skip_constructor) {
		$this->name = $name;
		$tmp = null;
		if($propertyNames !== null) {
			$tmp = $propertyNames;
		} else {
			$tmp = (new _hx_array(array()));
		}
		$this->propertyNames = $tmp;
		$this->instance = $this->createInstance();
		$this->methodCache = new haxe_ds_StringMap();
		$this->methodDict = new haxe_ds_StringMap();
	}}
	public $instance;
	public $methodCache;
	public $methodDict;
	public $name;
	public $propertyNames;
	public function addMethod($name, $method) {
		$method->module = $this->name;
		$this->methodDict->set($name, $method);
		$this->resolveHandler($name);
	}
	public function asInstance() {
		return $this->instance;
	}
	public function createInstance() {
		return new runtime_modules_ModuleInstance($this->name);
	}
	public function getMethod($name) {
		return $this->methodDict->get($name);
	}
	public function toString() {
		return "Module(" . _hx_string_or_null($this->name) . ")";
	}
	public function resolveHandler($name) {
		$nameEvent = util_StringUtil::asNameEventPair($name);
		if($nameEvent === null) {
			return;
		}
		$objectName = $nameEvent->get("name");
		$object = $this->instance->getProxy($objectName);
		$eventName = $nameEvent->get("event");
		$subName = $nameEvent->get("sub");
		if($object !== null) {
			$map = new haxe_ds_StringMap();
			$object->addModuleHandler($this->name, $subName, $eventName, $map);
			$service = runtime_process_ServiceManager::createHandlerService($map);
			runtime_process_ProcessManager::addDelayedService($service);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function findOrCreate($name) {
		$module = runtime_globals_GlobalModules::getModule($name);
		if($module !== null) {
			return $module;
		}
		$module = new runtime_modules_Module($name, null);
		return runtime_globals_GlobalModules::setModule($name, $module);
	}
	function __toString() { return $this->toString(); }
}
