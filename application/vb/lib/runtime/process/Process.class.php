<?php

// Generated by Haxe 3.4.2
class runtime_process_Process extends runtime_functions_ModuleFunctions {
	public function __construct($methodContext) {
		if(!php_Boot::$skip_constructor) {
		parent::__construct($methodContext);
	}}
	public $compiledMethod;
	public function run() {
		while($this->hasMore()) {
			$this->dispatch($this->next());
		}
		if($this->output->length === 0) {
			$this->pushOutput($this->pop());
		}
		return $this->output;
	}
	public function dispatch($opCode) {
		switch($opCode) {
		case 0:{
			$this->nop();
		}break;
		case 1:{
			$tmp = $this->next();
			$tmp1 = $this->next();
			$this->callMemberFunction($tmp, $tmp1, $this->next());
		}break;
		case 2:{
			$tmp2 = $this->next();
			$this->dimension($tmp2, $this->next());
		}break;
		case 3:{
			$this->divide();
		}break;
		case 4:{
			$this->eq();
		}break;
		case 5:{
			$tmp3 = $this->next();
			$this->fnCall($tmp3, $this->next());
		}break;
		case 6:{
			$this->gt();
		}break;
		case 7:{
			$this->gte();
		}break;
		case 8:{
			$this->jmp($this->next());
		}break;
		case 9:{
			$this->jmpIfFalse($this->next());
		}break;
		case 10:{
			$this->lt();
		}break;
		case 11:{
			$this->lte();
		}break;
		case 12:{
			$this->minus();
		}break;
		case 13:{
			$this->neq();
		}break;
		case 14:{
			$this->plus();
		}break;
		case 15:{
			$this->pop();
		}break;
		case 16:{
			$this->popIntoGlobal($this->next());
		}break;
		case 17:{
			$tmp4 = $this->next();
			$this->popIntoProperty($tmp4, $this->next());
		}break;
		case 19:{
			$this->pushConst($this->next());
		}break;
		case 20:{
			$this->pushGlobal($this->next());
		}break;
		case 21:{
			$tmp5 = $this->next();
			$this->pushProperty($tmp5, $this->next());
		}break;
		case 22:{
			$this->pushStdModule($this->next());
		}break;
		case 24:{
			$tmp6 = $this->next();
			$this->subDefine($tmp6, $this->next());
		}break;
		case 25:{
			$this->subReturn();
		}break;
		case 26:{
			$this->times();
		}break;
		default:{
			$this->unknownOpcode($opCode);
		}break;
		}
	}
	public function hasMore() {
		$this->iterations++;
		if(!$this->hasMoreBytecodes()) {
			return $this->restoreContext();
		} else {
			return true;
		}
	}
	public function next() {
		return $this->bytecodes[$this->pc++];
	}
	public function unknownOpcode($opCode) {
		haxe_Log::trace("unknownOpcode(" . _hx_string_rec($opCode, "") . ")", _hx_anonymous(array("fileName" => "Process.hx", "lineNumber" => 90, "className" => "runtime.process.Process", "methodName" => "unknownOpcode", "customParams" => (new _hx_array(array($this->bytecodes))))));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function fromCompiledMethod($compiledMethod) {
		$methodContext = new runtime_process_MethodContext($compiledMethod);
		return new runtime_process_Process($methodContext);
	}
	function __toString() { return 'runtime.process.Process'; }
}
