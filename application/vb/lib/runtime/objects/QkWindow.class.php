<?php

// Generated by Haxe 3.4.2
class runtime_objects_QkWindow extends runtime_objects_QkProxyObject {
	public function __construct($name, $caption = null) {
		if(!php_Boot::$skip_constructor) {
		if($caption === null) {
			$caption = "a Window";
		}
		parent::__construct($name);
		$this->caption = $caption;
		$this->width = 475;
		$this->height = 435;
	}}
	public $caption;
	public $height;
	public $width;
	public function creationService() {
		return _hx_anonymous(array("service" => "create", "args" => _hx_anonymous(array("id" => $this->proxyId, "caption" => $this->caption, "width" => $this->width, "height" => $this->height, "xtype" => "window"))));
	}
	public function getProperty($propertyName) {
		switch($propertyName) {
		case "caption":{
			return $this->caption;
		}break;
		case "height":{
			return $this->height;
		}break;
		case "width":{
			return $this->width;
		}break;
		default:{
			return "property(" . _hx_string_or_null($propertyName) . ") not found in " . _hx_string_or_null($this->name);
		}break;
		}
	}
	public function setProperty($propertyName, $val, $map) {
		switch($propertyName) {
		case "caption":{
			$this->caption = $val;
			$map->set("action", "setCaption");
			$map->set("args", $this->caption);
		}break;
		case "height":{
			$this->height = $val;
			$map->set("action", "setHeight");
			$map->set("args", $this->height);
		}break;
		case "width":{
			$this->width = $val;
			$map->set("action", "setWidth");
			$map->set("args", $this->width);
		}break;
		}
	}
	public function toString() {
		return "QkWindow(" . _hx_string_or_null($this->name) . ", " . _hx_string_rec($this->proxyId, "") . ", " . _hx_string_or_null($this->caption) . ")";
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
