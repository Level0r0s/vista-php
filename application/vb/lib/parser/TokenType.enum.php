<?php

// Generated by Haxe 3.4.2
class parser_TokenType extends Enum {
	public static $Amp;
	public static $Any;
	public static $Ast;
	public static $At;
	public static $Bs;
	public static $Caret;
	public static $Colon;
	public static $ColonEq;
	public static $Comma;
	public static $Dash;
	public static $Dollar;
	public static $Dquote;
	public static $Equals;
	public static $Excl;
	public static $Float;
	public static $Fs;
	public static $Gt;
	public static $Gte;
	public static $Hash;
	public static $Id;
	public static $Int;
	public static $Lb;
	public static $Lp;
	public static $Lt;
	public static $Lte;
	public static $Ne;
	public static $Nl;
	public static $Percent;
	public static $Rb;
	public static $Rp;
	public static $Semi;
	public static $Squote;
	public static $String;
	public static $__constructors = array(9 => 'Amp', 32 => 'Any', 17 => 'Ast', 13 => 'At', 26 => 'Bs', 10 => 'Caret', 20 => 'Colon', 28 => 'ColonEq', 15 => 'Comma', 16 => 'Dash', 14 => 'Dollar', 30 => 'Dquote', 18 => 'Equals', 11 => 'Excl', 2 => 'Float', 27 => 'Fs', 22 => 'Gt', 24 => 'Gte', 12 => 'Hash', 0 => 'Id', 1 => 'Int', 4 => 'Lb', 6 => 'Lp', 21 => 'Lt', 23 => 'Lte', 25 => 'Ne', 31 => 'Nl', 8 => 'Percent', 5 => 'Rb', 7 => 'Rp', 19 => 'Semi', 29 => 'Squote', 3 => 'String');
	}
parser_TokenType::$Amp = new parser_TokenType("Amp", 9);
parser_TokenType::$Any = new parser_TokenType("Any", 32);
parser_TokenType::$Ast = new parser_TokenType("Ast", 17);
parser_TokenType::$At = new parser_TokenType("At", 13);
parser_TokenType::$Bs = new parser_TokenType("Bs", 26);
parser_TokenType::$Caret = new parser_TokenType("Caret", 10);
parser_TokenType::$Colon = new parser_TokenType("Colon", 20);
parser_TokenType::$ColonEq = new parser_TokenType("ColonEq", 28);
parser_TokenType::$Comma = new parser_TokenType("Comma", 15);
parser_TokenType::$Dash = new parser_TokenType("Dash", 16);
parser_TokenType::$Dollar = new parser_TokenType("Dollar", 14);
parser_TokenType::$Dquote = new parser_TokenType("Dquote", 30);
parser_TokenType::$Equals = new parser_TokenType("Equals", 18);
parser_TokenType::$Excl = new parser_TokenType("Excl", 11);
parser_TokenType::$Float = new parser_TokenType("Float", 2);
parser_TokenType::$Fs = new parser_TokenType("Fs", 27);
parser_TokenType::$Gt = new parser_TokenType("Gt", 22);
parser_TokenType::$Gte = new parser_TokenType("Gte", 24);
parser_TokenType::$Hash = new parser_TokenType("Hash", 12);
parser_TokenType::$Id = new parser_TokenType("Id", 0);
parser_TokenType::$Int = new parser_TokenType("Int", 1);
parser_TokenType::$Lb = new parser_TokenType("Lb", 4);
parser_TokenType::$Lp = new parser_TokenType("Lp", 6);
parser_TokenType::$Lt = new parser_TokenType("Lt", 21);
parser_TokenType::$Lte = new parser_TokenType("Lte", 23);
parser_TokenType::$Ne = new parser_TokenType("Ne", 25);
parser_TokenType::$Nl = new parser_TokenType("Nl", 31);
parser_TokenType::$Percent = new parser_TokenType("Percent", 8);
parser_TokenType::$Rb = new parser_TokenType("Rb", 5);
parser_TokenType::$Rp = new parser_TokenType("Rp", 7);
parser_TokenType::$Semi = new parser_TokenType("Semi", 19);
parser_TokenType::$Squote = new parser_TokenType("Squote", 29);
parser_TokenType::$String = new parser_TokenType("String", 3);
