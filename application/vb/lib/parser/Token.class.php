<?php

// Generated by Haxe 3.4.2
class parser_Token {
	public function __construct($str, $type) {
		if(!php_Boot::$skip_constructor) {
		$this->str = $this->val;
		$this->type = $type;
		$this->val = $this->convert($str, $type);
	}}
	public $str;
	public $val;
	public $type;
	public function toString() {
		$s = $this->val;
		$v = trim($s);
		$t = Std::string($this->type);
		return "Token(" . _hx_string_or_null($v) . " : " . _hx_string_or_null($t) . ")";
	}
	public function convert($s, $type) {
		if($type === constants_TokenType::$Int) {
			return Std::parseInt($s);
		} else {
			if($type === constants_TokenType::$Float) {
				return Std::parseFloat($s);
			} else {
				return $s;
			}
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
