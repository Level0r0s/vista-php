<?php

// Generated by Haxe 3.4.2
class parser_nodes_WhileNode extends parser_nodes_BlockNode {
	public function __construct($condition) {
		if(!php_Boot::$skip_constructor) {
		parent::__construct();
		$this->condition = $condition;
	}}
	public $condition;
	public function generate($bytecodes, $util) {
		$mark1 = $bytecodes->length;
		$this->condition->generate($bytecodes, $util);
		$bytecodes->push(9);
		$bytecodes->push(0);
		$mark2 = $bytecodes->length;
		parent::generate($bytecodes,$util);
		$bytecodes->push(8);
		$bytecodes->push(0);
		$mark3 = $bytecodes->length;
		$bytecodes[$mark2 - 1] = $mark3 - $mark2;
		$bytecodes[$mark3 - 1] = $mark1 - $mark3 - 1;
	}
	public function toString() {
		$c = $this->condition->toString();
		$n = $this->stmts->length;
		return "WhileNode(" . _hx_string_or_null($c) . " - " . _hx_string_rec($n, "") . ")";
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
