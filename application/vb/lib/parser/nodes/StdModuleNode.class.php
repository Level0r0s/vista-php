<?php

// Generated by Haxe 3.4.2
class parser_nodes_StdModuleNode extends parser_nodes_ParseNode {
	public function __construct($name) {
		if(!php_Boot::$skip_constructor) {
		parent::__construct();
		$this->name = $name->getName();
		$this->subroutines = (new _hx_array(array()));
	}}
	public $name;
	public $subroutines;
	public function addStmt($stmt) {
		if(!$stmt->isSubroutine()) {
			haxe_Log::trace("StdModuleNode addStmt", _hx_anonymous(array("fileName" => "StdModuleNode.hx", "lineNumber" => 18, "className" => "parser.nodes.StdModuleNode", "methodName" => "addStmt", "customParams" => (new _hx_array(array($stmt))))));
			return;
		}
		$tmp = $this->subroutines;
		$tmp->push($stmt->asSubroutineNode());
	}
	public function generate($bytecodes, $util) {
		$_g = 0;
		$_g1 = $this->subroutines;
		while($_g < $_g1->length) {
			$sub = $_g1[$_g];
			$_g = $_g + 1;
			$compiledMethod = $sub->compile();
			$methodName = $sub->name;
			$stdModule = runtime_modules_StdModule::findOrCreate($this->name);
			$stdModule->addMethod($methodName, $compiledMethod);
			unset($sub,$stdModule,$methodName,$compiledMethod);
		}
	}
	public function isModule() {
		return true;
	}
	public function toString() {
		return "StdModuleNode(" . _hx_string_or_null($this->name) . ")";
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
