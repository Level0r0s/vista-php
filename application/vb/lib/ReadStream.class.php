<?php

// Generated by Haxe 3.4.2
class ReadStream {
	public function __construct($src = null) {
		if(!php_Boot::$skip_constructor) {
		if($src === null) {
			$src = "";
		}
		$this->UNDERSCORE = "_";
		$this->TAB = "\x09";
		$this->SPACE = " ";
		$this->COLONEQUAL = ":=";
		$this->DOT = ".";
		$this->PLUS = "+";
		$this->FS = "/";
		$this->BS = "\\";
		$this->NE = "<>";
		$this->GTET = ">=";
		$this->LTET = "<=";
		$this->GT = ">";
		$this->LT = "<";
		$this->COLON = ":";
		$this->SEMI = ";";
		$this->EQUALS = "=";
		$this->AST = "*";
		$this->DASH = "-";
		$this->COMMA = ",";
		$this->DOLLAR = "\$";
		$this->AT = "@";
		$this->HASH = "#";
		$this->EXCL = "!";
		$this->CARET = "^";
		$this->AMP = "&";
		$this->PERCENT = "%";
		$this->RP = ")";
		$this->LP = "(";
		$this->RB = "]";
		$this->LB = "[";
		$this->index = -1;
		$this->ch = "";
		$this->src = $src;
	}}
	public $LB;
	public $RB;
	public $LP;
	public $RP;
	public $PERCENT;
	public $AMP;
	public $CARET;
	public $EXCL;
	public $HASH;
	public $AT;
	public $DOLLAR;
	public $COMMA;
	public $DASH;
	public $AST;
	public $EQUALS;
	public $SEMI;
	public $COLON;
	public $LT;
	public $GT;
	public $LTET;
	public $GTET;
	public $NE;
	public $BS;
	public $FS;
	public $PLUS;
	public $DOT;
	public $COLONEQUAL;
	public $SPACE;
	public $TAB;
	public $UNDERSCORE;
	public $index;
	public $ch;
	public $src;
	public function atEof() {
		return $this->index >= strlen($this->src);
	}
	public function isAlphaLower($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		if((strcmp($ch, "a")>= 0)) {
			return (strcmp($ch, "z")<= 0);
		} else {
			return false;
		}
	}
	public function isAlphaUpper($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		if((strcmp($ch, "A")>= 0)) {
			return (strcmp($ch, "Z")<= 0);
		} else {
			return false;
		}
	}
	public function isAmp($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->AMP;
	}
	public function isAst($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->AST;
	}
	public function isAt($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->AT;
	}
	public function isBs($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->BS;
	}
	public function isCaret($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->CARET;
	}
	public function isColon($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->COLON;
	}
	public function isColonEq($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->COLONEQUAL;
	}
	public function isDash($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->DASH;
	}
	public function isDigit($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		if((strcmp($ch, "0")>= 0)) {
			return (strcmp($ch, "9")<= 0);
		} else {
			return false;
		}
	}
	public function isDollar($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->DOLLAR;
	}
	public function isDot($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->DOT;
	}
	public function isEquals($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->EQUALS;
	}
	public function isExcl($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->EXCL;
	}
	public function isFs($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->FS;
	}
	public function isGt($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->GT;
	}
	public function isGte($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->GTET;
	}
	public function isHash($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->HASH;
	}
	public function isIdCh($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		$tmp = null;
		if(!$this->isLetter($ch)) {
			$tmp = $this->isDigit($ch);
		} else {
			$tmp = true;
		}
		if(!$tmp) {
			return $this->isUnderscore($ch);
		} else {
			return true;
		}
	}
	public function isLb($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->LB;
	}
	public function isLetter($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		if(!$this->isAlphaLower($ch)) {
			return $this->isAlphaUpper($ch);
		} else {
			return true;
		}
	}
	public function isLp($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->LP;
	}
	public function isLt($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->LT;
	}
	public function isLte($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->LTET;
	}
	public function isNe($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->NE;
	}
	public function isPercent($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->PERCENT;
	}
	public function isPlus($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->PLUS;
	}
	public function isRb($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->RB;
	}
	public function isRp($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->RP;
	}
	public function isSemi($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->SEMI;
	}
	public function isSpace($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->SPACE;
	}
	public function isTab($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->TAB;
	}
	public function isUnderscore($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		return $ch === $this->UNDERSCORE;
	}
	public function isWhitespace($ch = null) {
		if($ch === null) {
			$ch = "";
		}
		if($ch === "") {
			$ch = $this->ch;
		}
		if(!$this->isSpace($ch)) {
			return $this->isTab($ch);
		} else {
			return true;
		}
	}
	public function nextCh() {
		$this->advance();
		return $this->ch;
	}
	public function peekCh() {
		return _hx_char_at($this->src, $this->index);
	}
	public function advance() {
		if(!$this->atEof()) {
			$this->index++;
		}
		$this->ch = $this->peekCh();
	}
	public function setEof() {
		$this->index = strlen($this->src) + 1;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'ReadStream'; }
}
